for (i in 1:f){
print(paste0("Peforming DE analysis for cluster: ", i))
degg <- bimod.diffExp.test(get(paste0("mg", i)), m3_ref[,!colnames(m3_ref) %in% colnames(get(paste0("mg", i)))], row.names(get(paste0("mg", i))))
assign(paste0("clus", i, ".genes"), rownames(subset(degg, degg[,1] < 0.001 & degg[,2] > 0.5)))
assign(paste0("clus", i, ".genes.values"), degg[get(paste0("clus", i, ".genes")),])
genes = c(genes, get(paste0("clus", i, ".genes")))
write.table(get(paste0("clus", i, ".genes.values")), file = paste0(path_output, "DEGs.", "PseudoBulk_Cluster",i, ".csv"), quote = F, row.names = T, col.names = T, sep =",")
}
# Clean up gene names (remove house keepers)
genes = genes[-1]
house.keeping.genes = row.names(read.delim("../data/house_keeping_final.txt", row.names = 1)) # found in ./data
genes <- intersect(genes, outersect(genes, row.names(house.keeping.genes)))
# PCA
pc <- prcomp(m3_ref[genes,])
rot <- pc[2]
rot = as.data.frame(rot)
rot = rot[,1:2]
colnames(rot) = c("PCA1","PCA2")
rot$RA = sapply(strsplit(row.names(rot), "_"),"[[",1)
ggplot(rot, aes(x=PCA1, y=PCA2, color=RA)) +
geom_point() +
scale_color_manual(name = "RA patient biopsy", values = c("firebrick4","firebrick","firebrick3",shadesOfGrey(2)[1],shadesOfGrey(2)[2]))
# How much variation is explained with each PC?
summary(pc)
eigs <- pc$sdev^2
eigs[1] / sum(eigs)
eigs[2] / sum(eigs)
eigs[3] / sum(eigs)
# PCA
pc <- prcomp(m3_ref[genes,])
rot <- pc[2]
rot = as.data.frame(rot)
rot = rot[,1:2]
colnames(rot) = c("PCA1","PCA2")
rot$RA = sapply(strsplit(row.names(rot), "_"),"[[",1)
ggplot(rot, aes(x=PCA1, y=PCA2, color=RA)) +
geom_point() +
scale_color_manual(name = "RA patient biopsy", values = c("firebrick4","firebrick","firebrick3",shadesOfGrey(2)[1],shadesOfGrey(2)[2]))
# How much variation is explained with each PC?
summary(pc)
eigs <- pc$sdev^2
eigs[1] / sum(eigs)
eigs[2] / sum(eigs)
eigs[3] / sum(eigs)
# Plot Heatmap
quantile.range <- quantile(m3_ref, probs = seq(0, 1, 0.05))
palette.breaks <- seq(quantile.range["0%"], quantile.range["100%"], 0.1)
# use http://colorbrewer2.org/ to find optimal divergent color palette (or set own)
col.pal = colorRampPalette(c("black","purple","darkorchid1","gold1"))
color.palette  <- col.pal(length(palette.breaks) - 1)
rownames(rot)
annotdf <- data.frame(row.names = rownames(rot), RA = rot$RA)
annotdf
cols = c("firebrick4","firebrick","firebrick3",shadesOfGrey(2)[1],shadesOfGrey(2)[2])
names(cols) = paste0("RA", 1:5)
mycolors <- list(RA = cols)
mycolors
heat <- pheatmap(m3_ref[genes,], show_colnames = F , cluster_rows = T, cluster_cols = T,
col=color.palette, breaks = palette.breaks, clustering_method = "complete",
scale="none", trace = "none",density.info = "none", cexRow = 0.05,
annotation_col = annotdf, annotation_colors = mycolors, fontsize_row = 10,
cellheight = 2, cellwidth = 5)
add.flag(heat,
kept.labels = c("IGLL5", "FN1", "CD52", "MS4A1", "CXCL12", "MMP9", "CLU", "VIM", "COL6A2", "CD4", "XBP1", "JUN", "LTB", "TYROBP"),
repel.degree = 0)
heat <- pheatmap(m3_ref[genes,], show_colnames = F , cluster_rows = T, cluster_cols = T,
col=color.palette, breaks = palette.breaks, clustering_method = "ward.D",
scale="none", trace = "none",density.info = "none", cexRow = 0.05,
annotation_col = annotdf, annotation_colors = mycolors, fontsize_row = 10,
cellheight = 2, cellwidth = 5)
heat <- pheatmap(m3_ref[genes,], show_colnames = F , cluster_rows = T, cluster_cols = T,
col=color.palette, breaks = palette.breaks, clustering_method = "ward.D2",
scale="none", trace = "none",density.info = "none", cexRow = 0.05,
annotation_col = annotdf, annotation_colors = mycolors, fontsize_row = 10,
cellheight = 2, cellwidth = 5)
heat <- pheatmap(dist(t(m3_ref[genes,])), show_colnames = F , cluster_rows = T, cluster_cols = T,
col=color.palette, breaks = palette.breaks, clustering_method = "ward.D2",
scale="none", trace = "none",density.info = "none", cexRow = 0.05,
annotation_col = annotdf, annotation_colors = mycolors, fontsize_row = 10,
cellheight = 2, cellwidth = 5)
heat <- pheatmap(dist(m3_ref[genes,]), show_colnames = F , cluster_rows = T, cluster_cols = T,
col=color.palette, breaks = palette.breaks, clustering_method = "ward.D2",
scale="none", trace = "none",density.info = "none", cexRow = 0.05,
annotation_col = annotdf, annotation_colors = mycolors, fontsize_row = 10,
cellheight = 2, cellwidth = 5)
heat <- pheatmap(m3_ref[genes,], show_colnames = F , cluster_rows = T, cluster_cols = T,
col=color.palette, breaks = palette.breaks, clustering_method = "ward.D2",
scale="none", trace = "none",density.info = "none", cexRow = 0.05,
annotation_col = annotdf, annotation_colors = mycolors, fontsize_row = 10,
cellheight = 2, cellwidth = 5)
heat <- pheatmap(m3_ref[genes,], show_colnames = F , cluster_rows = T, cluster_cols = T,
col=color.palette, breaks = palette.breaks, clustering_method = "ward.D2",clustering_distance_cols = "euclidean",
scale="none", trace = "none",density.info = "none", cexRow = 0.05,
annotation_col = annotdf, annotation_colors = mycolors, fontsize_row = 10,
cellheight = 2, cellwidth = 5)
heat <- pheatmap(m3_ref[genes,], show_colnames = F , cluster_rows = T, cluster_cols = T,
col=color.palette, breaks = palette.breaks, clustering_method = "ward.D2",clustering_distance_rows = "euclidean",
scale="none", trace = "none",density.info = "none", cexRow = 0.05,
annotation_col = annotdf, annotation_colors = mycolors, fontsize_row = 10,
cellheight = 2, cellwidth = 5)
heat <- pheatmap(m3_ref[genes,], show_colnames = F , cluster_rows = T, cluster_cols = T,
col=color.palette, breaks = palette.breaks, clustering_method = "ward.D2",
scale="none", trace = "none",density.info = "none", cexRow = 0.05,
annotation_col = annotdf, annotation_colors = mycolors, fontsize_row = 10,
cellheight = 2, cellwidth = 5)
add.flag(heat,
kept.labels = c("IGLL5", "FN1", "CD52", "MS4A1", "CXCL12", "MMP9", "CLU", "VIM", "COL6A2", "CD4", "XBP1", "JUN", "LTB", "TYROBP"),
repel.degree = 0)
heat <- pheatmap(dist(m3_ref[genes,]), show_colnames = F , cluster_rows = T, cluster_cols = T,
col=color.palette, breaks = palette.breaks, clustering_method = "ward.D2",
scale="none", trace = "none",density.info = "none", cexRow = 0.05,
annotation_col = annotdf, annotation_colors = mycolors, fontsize_row = 10,
cellheight = 2, cellwidth = 5)
heat <- pheatmap(m3_ref[genes,], show_colnames = F , cluster_rows = T, cluster_cols = T,
col=color.palette, breaks = palette.breaks, clustering_method = "ward.D2",
scale="none", trace = "none",density.info = "none", cexRow = 0.05,
annotation_col = annotdf, annotation_colors = mycolors, fontsize_row = 10,
cellheight = 2, cellwidth = 5)
add.flag(heat,
kept.labels = c("IGLL5", "FN1", "CD52", "MS4A1", "CXCL12", "MMP9", "CLU", "VIM", "COL6A2", "CD4", "XBP1", "JUN", "LTB", "TYROBP"),
repel.degree = 0)
# Hierachical clustering on tsne matrix
hc = hclust(dist(t(all.exp.values.norm)), method = "ward.D2")
f = 5
clusters = as.matrix(cutree(hc, f))
shadesOfGrey <- colorRampPalette(c("grey50", "grey80"))
col.panel = c("firebrick4","firebrick","firebrick3",shadesOfGrey(2)[1],shadesOfGrey(2)[2])
row.names(clusters) = colnames(all.exp.values.norm)
print("Plotting dendogram ... Please adjust k and rerun if needed")
hc_plot = plot(hc, labels = F, sub="", xlab = "", main = "Pseudobulk Cluster Dendogram")
rect.hclust(hc, f, border = col.panel[1:f])
m3_ref = all.exp.values.norm # precaution
colnames(m3_ref)
# Split into pseudobulk cluster groups
for (i in 1:f){
assign(paste0("mg", i), m3_ref[,clusters == i])
secs = sapply(strsplit(colnames(get(paste0("mg", i))), "_"), "[[",1)
for (j in 1:length(secs)){
mtmp =  get(paste0("mg", i))[,grep(j, colnames(get(paste0("mg", i))), value = T)]
write.table(mtmp, file = paste0(path_output, "PseudoBulk_Cluster",i,".", j,".csv"), sep =",", quote =F, row.names = F, col.names = T)
}
}
# Do bimodial test where degg[,1] is the p-value and degg[,2] is the relative difference between the groups
genes = ""
for (i in 1:f){
print(paste0("Peforming DE analysis for cluster: ", i))
degg <- bimod.diffExp.test(get(paste0("mg", i)), m3_ref[,!colnames(m3_ref) %in% colnames(get(paste0("mg", i)))], row.names(get(paste0("mg", i))))
assign(paste0("clus", i, ".genes"), rownames(subset(degg, degg[,1] < 0.001 & degg[,2] > 0.5)))
assign(paste0("clus", i, ".genes.values"), degg[get(paste0("clus", i, ".genes")),])
genes = c(genes, get(paste0("clus", i, ".genes")))
write.table(get(paste0("clus", i, ".genes.values")), file = paste0(path_output, "DEGs.", "PseudoBulk_Cluster",i, ".csv"), quote = F, row.names = T, col.names = T, sep =",")
}
# Clean up gene names (remove house keepers)
genes = genes[-1]
house.keeping.genes = row.names(read.delim("../data/house_keeping_final.txt", row.names = 1)) # found in ./data
genes <- intersect(genes, outersect(genes, row.names(house.keeping.genes)))
# PCA
pc <- prcomp(m3_ref[genes,])
rot <- pc[2]
rot = as.data.frame(rot)
rot = rot[,1:2]
colnames(rot) = c("PCA1","PCA2")
rot$RA = sapply(strsplit(row.names(rot), "_"),"[[",1)
ggplot(rot, aes(x=PCA1, y=PCA2, color=RA)) +
geom_point() +
scale_color_manual(name = "RA patient biopsy", values = c("firebrick4","firebrick","firebrick3",shadesOfGrey(2)[1],shadesOfGrey(2)[2]))
# How much variation is explained with each PC?
summary(pc)
eigs <- pc$sdev^2
eigs[1] / sum(eigs)
eigs[2] / sum(eigs)
eigs[3] / sum(eigs)
### Performed mixed-model power analysis for ST data ####
library(simr)
simrOptions(progress=FALSE)
# Read the fuctions file
setwd("/Users/svickovi/Library/Mobile Documents/com~apple~CloudDocs/Desktop/morphoSPOT/3dst_repo/3dst/data")
source('../functions/Read_Functions.R')
# Which samples do you want to use?
norm_samples = c("RA1", "RA2", "RA3", "RA4", "RA5")
# Where are you norm expression R files located?
path_samples = "../data/"
# Load data as R objects for selected RA patient
section_labels = ""
all_ann_all = ""
id_samples = ""
sero_status = ""
treatment_status_dmards = ""
treatment_status_tnf = ""
treatment_status_il6 = ""
location_status = ""
for (norm_sample in norm_samples){
files_norm = list.files(pattern = glob2rx(paste0(norm_sample, "_norm.exp.values.*")), path = path_samples)
all_ann_rest_tmp = ""
all_ann_inf_tmp = ""
counter = 0
for (i in 1:length(files_norm)){
load(paste0(path_samples, files_norm[i]))
load(paste0(path_samples, norm_sample, "_", i, "_selected_adjusted_spots_3D_manual_app"))
assign(paste0("inf_s", i), read.csv(paste0("../data/", norm_sample, "_", i, "_all_inf.csv"), header = T, row.names = 1)) # files found on SCP
section_labels = c(section_labels, sapply(strsplit(colnames(get(paste0("m", i))), "_"), "[[", 1))
all_ann_inf_tmp = c(all_ann_inf_tmp, rep("Inf", length(row.names(get(paste0("inf_s", i))))))
all_ann_rest_tmp = c(all_ann_rest_tmp, rep("Rest", length(sapply(strsplit(colnames(get(paste0("m", i))), "_"), "[[", 1))-length(row.names(get(paste0("inf_s", i))))))
counter = counter + length(sapply(strsplit(colnames(get(paste0("m", i))), "_"), "[[", 1))
}
all_ann_inf_tmp = all_ann_inf_tmp[-1]
all_ann_rest_tmp = all_ann_rest_tmp[-1]
all_ann_all = c(all_ann_all, c(all_ann_inf_tmp, all_ann_rest_tmp))
id_samples = c(id_samples, rep(norm_sample, counter))
# collect data on sero status
if ((norm_sample == "RA1") | (norm_sample == "RA2") | (norm_sample == "RA3")){
sero_status = c(sero_status, rep("positive", counter))
}
else sero_status = c(sero_status, rep("negative", counter))
# collect data on biopsy location and treatment status
if ((norm_sample == "RA1") | (norm_sample == "RA3") | (norm_sample == "RA4")){
location_status = c(location_status, rep("knee", counter))
treatment_status_dmards = c(treatment_status_dmards, rep("yes", counter))
}
else {
location_status = c(location_status, rep("hip", counter))
treatment_status_dmards = c(treatment_status_dmards, rep("yes", counter))
}
if ((norm_sample == "RA1") | (norm_sample == "RA2") | (norm_sample == "RA3")| (norm_sample == "RA4")){
treatment_status_tnf = c(treatment_status_tnf, rep("no", counter))}
else treatment_status_tnf = c(treatment_status_tnf, rep("yes", counter))
if ((norm_sample == "RA4") | (norm_sample == "RA5")){
treatment_status_il6 = c(treatment_status_il6, rep("yes", counter))}
else treatment_status_il6  = c(treatment_status_il6, rep("no", counter))
}
id_samples = id_samples[-1]
section_labels = section_labels[-1]
all_ann_all = all_ann_all[-1]
location_status = location_status[-1]
sero_status = sero_status[-1]
treatment_status_dmards = treatment_status_dmards[-1]
treatment_status_tnf = treatment_status_tnf[-1]
treatment_status_il6 = treatment_status_il6[-1]
factor(all_ann_all)
table(section_labels)
sum(table(section_labels))
table(sero_status)
# set up covariates data frame
covars = data.frame(cbind(as.numeric(as.character(str_replace(id_samples, "RA", ""))), as.numeric(as.character(str_replace(section_labels, "X", ""))), all_ann_all,location_status,sero_status,treatment_status_dmards,treatment_status_tnf,treatment_status_il6))
colnames(covars) = c("id_samples", "section_labels", "all_ann_all","location_status","sero_status",
"treatment_status_dmards,treatment_status_tnf","treatment_status_il6")
# perform power analysis
## Intercept and slopes for intervention, time1, time2, intervention:time1, intervention:time2
fixed <- c(5, 0, 0.1, 0.2, 1, 0.9)
## Random intercepts for participants clustered by class
rand <- list(0.33)
## residual variance
res <- 1
# numbers of covariates
sero_status_numbers = length(unique(sero_status))
section_labels_numbers = length(unique(section_labels))
location_status_numbers = length(unique(location_status))
id_samples_numbers = length(unique(id_samples))
# print number of conditions
covars
## Create model
# # Simulating without data
samples_id <- c(rep(1,4), rep(2,7), rep(3,5), rep(4,4), rep(5,3))
section_id <- c(c(1:4), c(1:7), c(1:5), c(1:4), c(1:3))
location <- c(rep("knee",4), rep("hip",7), rep( "knee",5), rep("hip",4), rep("knee",3))
group<- c(rep("positive",4), rep("positive",7), rep( "positive",5), rep("negtative",4), rep("negtative",3))
covars <- data.frame(samples_id, section_id, location, group)
v = matrix(c(0.5, 0.5, 0.5, 0.5), 2)
#model = makeLmer(y ~ sero_status*location_status + (1|id_samples), fixef=c(rep(0.5, 4)), VarCorr=list(0.5), sigma=2, data=covars)
model = makeLmer(y ~ group*location + (1|samples_id), fixef=c(rep(0.5, 4)), VarCorr=list(0.5), sigma=2, data=covars)
## power sim for time
sim_location <- powerSim(model, nsim=100, test = fcompare(y~location))
sim_location
## power sim for sero status
sim_sero <- powerSim(model, nsim=100, test = fcompare(y~group))
sim_sero
# ## power sim for section labels
sim_section <- powerSim(model, nsim=100, test = fcompare(y~section_labels))
sim_section
# ## power sim for section labels
sim_section <- powerSim(model, nsim=100, test = fcompare(y~samples_id))
sim_section
#model = makeLmer(y ~ sero_status*location_status + (1|id_samples), fixef=c(rep(0.5, 4)), VarCorr=list(0.5), sigma=2, data=covars)
model = makeLmer(y ~ group*location + (1|samples_id*section_id), fixef=c(rep(0.5, 4)), VarCorr=list(0.5), sigma=2, data=covars)
#model = makeLmer(y ~ sero_status*location_status + (1|id_samples), fixef=c(rep(0.5, 4)), VarCorr=list(0.5), sigma=2, data=covars)
model = makeLmer(y ~ group*location*section_id + (1|samples_id), fixef=c(rep(0.5, 4)), VarCorr=list(0.5), sigma=2, data=covars)
#model = makeLmer(y ~ sero_status*location_status + (1|id_samples), fixef=c(rep(0.5, 4)), VarCorr=list(0.5), sigma=2, data=covars)
model = makeLmer(y ~ group*location*section_id + (1|samples_id), fixef=c(rep(0.5, 8)), VarCorr=list(0.5), sigma=2, data=covars)
## power sim for time
sim_location <- powerSim(model, nsim=100, test = fcompare(y~location))
## power sim for time
sim_location <- powerSim(model, nsim=100, test = fcompare(y~location))
sim_location
## power sim for sero status
sim_sero <- powerSim(model, nsim=100, test = fcompare(y~group))
sim_sero
# ## power sim for section labels
sim_section <- powerSim(model, nsim=100, test = fcompare(y~samples_id))
sim_section
# power sim for section labels
sim_inf <- powerSim(model, nsim=100, test = fcompare(y~section_id))
sim_inf
#v = matrix(c(0.5, 0.5, 0.5, 0.5), 2)
#model = makeLmer(y ~ sero_status*location_status + (1|id_samples), fixef=c(rep(0.5, 4)), VarCorr=list(0.5), sigma=2, data=covars)
model = makeLmer(y ~ group*location*section_id + (1|samples_id), fixef=c(rep(0.0, 8)), VarCorr=list(0.5), sigma=2, data=covars)
## power sim for time
sim_location <- powerSim(model, nsim=100, test = fcompare(y~location))
sim_location
## power sim for sero status
sim_sero <- powerSim(model, nsim=100, test = fcompare(y~group))
sim_sero
# ## power sim for section labels
sim_section <- powerSim(model, nsim=100, test = fcompare(y~samples_id))
sim_section
# power sim for section labels
sim_inf <- powerSim(model, nsim=100, test = fcompare(y~section_id))
sim_inf
# plot power curves
model_ext_class <- extend(model, along="samples_id", n=100)
summary(model_ext_class)
p_curve_treat <- powerCurve(model_ext_class, test=fcompare(y~location), within = "samples_id")
p_curve_treat
plot(p_curve_treat)
#model
model = makeLmer(y ~ group*location*section_id + (1|samples_id), fixef=c(rep(0.5, 8)), VarCorr=list(0.5), sigma=2, data=covars)
# plot power curves and extend model
model_ext_class <- extend(model, along="samples_id", n=100)
summary(model_ext_class)
p_curve_treat <- powerCurve(model_ext_class, test=fcompare(y~location), within = "samples_id", breaks = seq(1:10))
p_curve_treat <- powerCurve(model, test=fcompare(y~location), within = "samples_id", breaks = seq(1:10))
# plot power curves
p_curve_treat <- powerCurve(model, test=fcompare(y~location), within = "samples_id")
plot(p_curve_treat)
# plot power curves
p_curve_treat <- powerCurve(model, test=fcompare(y~location), within = "samples_id", breaks = seq(1:10))
plot(p_curve_treat)
#model
model = makeLmer(y ~ group*location + (1|samples_id*section_id), fixef=c(rep(0.5, 8)), VarCorr=list(0.5), sigma=2, data=covars)
#model
model = makeLmer(y ~ group*location + (1|samples_id|section_id), fixef=c(rep(0.5, 8)), VarCorr=list(0.5), sigma=2, data=covars)
#model
model = makeLmer(y ~ group*location + (1|samples_id+section_id), fixef=c(rep(0.5, 8)), VarCorr=list(0.5), sigma=2, data=covars)
#model
model = makeLmer(y ~ group*location + (1|(samples_id*section_id)), fixef=c(rep(0.5, 8)), VarCorr=list(0.5), sigma=2, data=covars)
#model
model = makeLmer(y ~ group*location + (1|(samples_id/section_id)), fixef=c(rep(0.5, 8)), VarCorr=list(0.5), sigma=2, data=covars)
#model
model = makeLmer(y ~ group*location + (1|samples_id/section_id), fixef=c(rep(0.5, 8)), VarCorr=list(0.5), sigma=2, data=covars)
#model
model = makeLmer(y ~ group*location + (1|samples_id/section_id), fixef=c(rep(0.5, 3)), VarCorr=list(0.5), sigma=2, data=covars)
#model
model = makeLmer(y ~ group*location + (1|samples_id/section_id), fixef=c(rep(0.5, 2)), VarCorr=list(0.5), sigma=2, data=covars)
#model
model = makeLmer(y ~ group*location + (1|section_id/samples_id), fixef=c(rep(0.5, 2)), VarCorr=list(0.5), sigma=2, data=covars)
#model
model = makeLmer(y ~ group*location + (1|section_id), fixef=c(rep(0.5, 2)), VarCorr=list(0.5), sigma=2, data=covars)
#model
model = makeLmer(y ~ group*location + (1|section_id), fixef=c(rep(0.5, 4)), VarCorr=list(0.5), sigma=2, data=covars)
#model
model = makeLmer(y ~ group*location*section_id + (1|samples_id/section_id), fixef=c(rep(0.5, 4)), VarCorr=list(0.5), sigma=2, data=covars)
#model
model = makeLmer(y ~ group*location + (1|samples_id/section_id), fixef=c(rep(0.5, 4)), VarCorr=list(0.5), sigma=2, data=covars)
#model
model = makeLmer(y ~ location*section_id + (1|samples_id/group), fixef=c(rep(0.5, 4)), VarCorr=list(0.5), sigma=2, data=covars)
#model
model = makeLmer(y ~ location*section_id + (1|samples_id/group), fixef=c(rep(0.5, 2)), VarCorr=list(0.5), sigma=2, data=covars)
#model
model = makeLmer(y ~ location*section_id + (1|samples_id/group), fixef=c(rep(0.5, 4)), VarCorr=list(0.5), sigma=2, data=covars)
#model
model = makeLmer(y ~ location*section_id + (1|samples_id/group), fixef=c(rep(0.5, 4)), VarCorr=list(0.5, 0.5), sigma=2, data=covars)
## power sim for time
sim_location <- powerSim(model, nsim=100, test = fcompare(y~location))
sim_location
## power sim for sero status
sim_sero <- powerSim(model, nsim=100, test = fcompare(y~group))
sim_sero
# ## power sim for section labels
sim_section <- powerSim(model, nsim=100, test = fcompare(y~samples_id))
sim_section
# power sim for section labels
sim_inf <- powerSim(model, nsim=100, test = fcompare(y~section_id))
sim_inf
#model
model = makeLmer(y ~ location*section_id + (1|samples_id/group), fixef=c(rep(0.5, 4)), VarCorr=list(0.5, 0.1), sigma=2, data=covars)
## power sim for time
sim_location <- powerSim(model, nsim=100, test = fcompare(y~location))
sim_location
#model
model = makeLmer(y ~ location*section_id + (1|samples_id/group), fixef=c(rep(0.5, 4)), VarCorr=list(0.1, 0.5), sigma=2, data=covars)
## power sim for time
sim_location <- powerSim(model, nsim=100, test = fcompare(y~location))
sim_location
## power sim for sero status
sim_sero <- powerSim(model, nsim=100, test = fcompare(y~group))
sim_sero
# ## power sim for section labels
sim_section <- powerSim(model, nsim=100, test = fcompare(y~samples_id))
sim_section
#model
model = makeLmer(y ~ location*section_id + (1|samples_id/group), fixef=c(rep(0.1, 4)), VarCorr=list(0.1, 0.5), sigma=2, data=covars)
## power sim for time
sim_location <- powerSim(model, nsim=100, test = fcompare(y~location))
sim_location
#model
model = makeLmer(y ~ location*section_id + (1|samples_id/group), fixef=c(rep(0.33, 4)), VarCorr=list(0.1, 0.5), sigma=2, data=covars)
## power sim for time
sim_location <- powerSim(model, nsim=100, test = fcompare(y~location))
sim_location
## power sim for sero status
sim_sero <- powerSim(model, nsim=100, test = fcompare(y~group))
sim_sero
# ## power sim for section labels
sim_section <- powerSim(model, nsim=100, test = fcompare(y~samples_id))
sim_section
# power sim for section labels
sim_inf <- powerSim(model, nsim=100, test = fcompare(y~section_id))
sim_inf
#model
model = makeLmer(y ~ location*section_id + (1|samples_id/group), fixef=c(rep(0.5, 4)), VarCorr=list(0.5, 0.1), sigma=2, data=covars)
## power sim for time
sim_location <- powerSim(model, nsim=100, test = fcompare(y~location))
sim_location
## power sim for sero status
sim_sero <- powerSim(model, nsim=100, test = fcompare(y~group))
sim_sero
# plot power curves
p_curve_treat <- powerCurve(model, test=fcompare(y~group), within = "samples_id", breaks = seq(1:10))
plot(p_curve_treat)
p_curve_treat <- powerCurve(model, test=fcompare(y~location), within = "samples_id", breaks = seq(1:10))
plot(p_curve_treat)
# extend model
model_ext_class <- extend(model, within = "samples_id", n=100) # possible also within samples instrad of along
summary(model_ext_class)
p_curve_treat <- powerCurve(model_ext_class, test=fcompare(y~group), along = "samples_id", breaks = seq(1:10))
p_curve_treat
plot(p_curve_treat)
# plot power curves for current model without spatial replication
p_curve_treat <- powerCurve(model, test=fcompare(y~group), along = "samples_id", breaks = seq(1:10))
plot(p_curve_treat)
p_curve_treat <- powerCurve(model, test=fcompare(y~location), along = "samples_id", breaks = seq(1:10))
plot(p_curve_treat)
p_curve_treat <- powerCurve(model, test=fcompare(y~location), along = "samples_id+group", breaks = seq(1:10))
# extend model
model_ext_class <- extend(model, within = "location+section_id+samples_id", n=100) # possible also within samples instrad of along
# extend model
model_ext_class <- extend(model, within = "location+section_id+group", n=100) # possible also within samples instrad of along
summary(model_ext_class)
p_curve_treat <- powerCurve(model_ext_class, test=fcompare(y~group), along = "samples_id", breaks = seq(1:100, by = 10))
p_curve_treat <- powerCurve(model_ext_class, test=fcompare(y~group), along = "samples_id", breaks = seq(1:100))
seq(1:100)
seq(1:100, by = 10)
seq(1:100, by = 1)
seq(1:10)
seq(1:10, 10)
seq(1, 100, by = 10)
9
seq(0, 100, by = 10)
p_curve_treat <- powerCurve(model_ext_class, test=fcompare(y~group), along = "samples_id", breaks = seq(0, 100, by = 10))
p_curve_treat
plot(p_curve_treat)
plot(sim_location)
sim_location
sim_sero
# plot power curves for current model without spatial replication
p_curve_treat <- powerCurve(model, test=fcompare(y~group), along = "section_id", breaks = seq(1:10)) #around 60% powered
plot(p_curve_treat)
#model
model = makeLmer(y ~ location*section_id + (1|samples_id/group), fixef=c(rep(0.5, 4)), VarCorr=list(0.5, 0.5), sigma=1, data=covars)
## power sim for time
sim_location <- powerSim(model, nsim=100, test = fcompare(y~location))
sim_location
## power sim for sero status
sim_sero <- powerSim(model, nsim=100, test = fcompare(y~group))
sim_sero
# ## power sim for section labels
sim_section <- powerSim(model, nsim=100, test = fcompare(y~samples_id))
sim_section
# power sim for section labels
sim_inf <- powerSim(model, nsim=100, test = fcompare(y~section_id))
sim_inf
# plot power curves for current model without spatial replication
p_curve_treat <- powerCurve(model, test=fcompare(y~group), along = "samples_id", breaks = seq(1:10)) #around 60% powered
plot(p_curve_treat)
#model
model = makeLmer(y ~ location*section_id + (1|samples_id/group), fixef=c(rep(0.5, 4)), VarCorr=list(0.5, 0.5), sigma=2, data=covars)
# plot power curves for current model without spatial replication
p_curve_treat <- powerCurve(model, test=fcompare(y~group), along = "samples_id") #around 60% powered
plot(p_curve_treat)
#model
model = makeLmer(y ~ location*section_id + (1|samples_id/group), fixef=c(rep(0.4, 4)), VarCorr=list(0.5, 0.1), sigma=2, data=covars)
## power sim for time
sim_location <- powerSim(model, nsim=100, test = fcompare(y~location))
sim_location
## power sim for sero status
sim_sero <- powerSim(model, nsim=100, test = fcompare(y~group))
sim_sero
# ## power sim for section labels
sim_section <- powerSim(model, nsim=100, test = fcompare(y~samples_id))
sim_section
# power sim for section labels
sim_inf <- powerSim(model, nsim=100, test = fcompare(y~section_id))
sim_inf
# plot power curves for current model without spatial replication
p_curve_treat <- powerCurve(model, test=fcompare(y~group), along = "samples_id") #around 60% powered
plot(p_curve_treat)
plot(p_curve_treat)
# plot power curves for current model without spatial replication
p_curve_treat <- powerCurve(model, test=fcompare(y~group), along = "samples_id",breaks = seq(0, 10, by = 1)) #around 60% powered
plot(p_curve_treat)
p_curve_treat
# plot power curves for current model without spatial replication
p_curve_treat <- powerCurve(model, test=fcompare(y~group), within = "samples_id",breaks = seq(0, 10, by = 1)) #around 60% powered
