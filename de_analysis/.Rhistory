plot.gene.2d.inf.7 = function(sample, cluster, m1, m2, m3, m4, m5, m6, m7, s1, s2, s3, s4, s5, s6, s7, x, y, transparency, min, max){ #, inf_all)
#mats_collection = matrix(ncol = 5, nrow = 1)
#colnames(mats_collection) = c("x", "y", "score", "sample", "section")
#inf_all$names = row.names(inf_all)
for (i in c(1:7)) {
if (i == "1") {
spots = s1
exp.values = m1}
if (i == "2") {
spots = s2
exp.values = m2}
if (i == "3") {
spots = s3
exp.values = m3}
if (i == "4") {
spots = s4
exp.values = m4}
if (i == "5") {
spots = s5
exp.values = m5}
if (i == "6") {
spots = s6
exp.values = m6}
if (i == "7") {
spots = s7
exp.values = m7}
clust.spots = rbind(s1,s2,s3,s4,s5,s6,s7)
genes.barcodes = clust.spots[rownames(clust.spots) %in% colnames(exp.values),]
exp.values = exp.values[,colnames(exp.values) %in% rownames(clust.spots)]
exp.values = exp.values[rowSums(exp.values) != 0,]
cluster = ann.col.inf
cluster = cluster[colnames(exp.values),]
genes.barcodes = cbind(genes.barcodes, cluster)
x1 = as.numeric(genes.barcodes[,1])
x1 = x1[!is.na(x1)]
y1 = as.numeric(genes.barcodes[,2])
y1 = y1[!is.na(y1)]
z = as.numeric(genes.barcodes[,3])
dis = rep(0.25 * as.numeric(i), nrow(genes.barcodes))
w = as.numeric(dis)
# x = 40
# y = 40
# transparency = 1
s =  interp(x1, y1, z, nx = x, ny = y)
#mats_collection = rbind(mats_collection, make_output_tissue_matrix(s$z, norm_samples, i))
#genes.barcodes.small = genes.barcodes[row.names(genes.barcodes) %in% row.names(inf_all[inf_all$Inf. == "Inf6",]),]
#x1.small = as.numeric(genes.barcodes.small[,1])
#x1.small = x1.small[!is.na(x1.small)]
#y1.small = as.numeric(genes.barcodes.small[,2])
#y1.small = y1.small[!is.na(y1.small)]
#z.small = as.numeric(genes.barcodes.small[,3])
#dis.small = rep(0.25 * as.numeric(i), nrow(genes.barcodes.small))
#w = as.numeric(dis.small)
#x.small = 100
#y.small = 100
# transparency = 1
#s.small =  interp(x1.small, y1.small, z.small, nx = x.small, ny = y.small)
if (i == "1") {
mat.1 = s$z}
#mat.1.small = s.small$z}
if (i == "2") {
mat.2 = s$z}
#mat.2.small = s.small$z}
if (i == "3") {
mat.3 = s$z}
#mat.3.small = s.small$z}
if (i == "4") {
mat.4 = s$z}
#mat.4.small = s.small$z}
if (i == "5") {
mat.5 = s$z}
#mat.5.small = s.small$z}
if (i == "6") {
mat.6 = s$z}
#mat.6.small = s.small$z}
if (i == "7") {
mat.7 = s$z}
#mat.7.small = s.small$z}
}
colorvar = colorRampPalette(c("#8a3795", "#4ebceb","#f15f48","gray80"))(4)
pdf(paste(sample,"_1_Contour_Inf",".pdf", sep=""))
image2D(z = mat.1, contour = T, smooth = TRUE, col=colorvar, alpha = transparency, box = FALSE, inttype = 1, clim = c(min, max), NAcol = "transparent", x = c(1:x), y = c(1:y), scale = F, colkey = list(plot = FALSE))
dev.off()
pdf(paste(sample,"_2_Contour_Inf",".pdf", sep=""))
image2D(z = mat.2, contour = T, smooth = TRUE, col=colorvar, alpha = transparency, box = FALSE, inttype = 1, clim = c(min, max), NAcol = "transparent", x = c(1:x), y = c(1:y), scale = F, colkey = list(plot = FALSE))
dev.off()
pdf(paste(sample,"_3_Contour_Inf",".pdf", sep=""))
image2D(z = mat.3, contour = T, smooth = TRUE, col=colorvar, alpha = transparency, box = FALSE, inttype = 1, clim = c(min, max), NAcol = "transparent", x = c(1:x), y = c(1:y), scale = F, colkey = list(plot = FALSE))
dev.off()
pdf(paste(sample,"_4_Contour_Inf",".pdf", sep=""))
image2D(z = mat.4, contour = T, smooth = TRUE, col=colorvar, alpha = transparency, box = FALSE, inttype = 1, clim = c(min, max), NAcol = "transparent", x = c(1:x), y = c(1:y), scale = F, colkey = list(plot = FALSE))
dev.off()
pdf(paste(sample,"_5_Contour_Inf",".pdf", sep=""))
image2D(z = mat.5, contour = T, smooth = TRUE, col=colorvar, alpha = transparency, box = FALSE, inttype = 1, clim = c(min, max), NAcol = "transparent", x = c(1:x), y = c(1:y), scale = F, colkey = list(plot = FALSE))
dev.off()
pdf(paste(sample,"_6_Contour_Inf",".pdf", sep=""))
image2D(z = mat.6, contour = T, smooth = TRUE, col=colorvar, alpha = transparency, box = FALSE, inttype = 1, clim = c(min, max), NAcol = "transparent", x = c(1:x), y = c(1:y), scale = F, colkey = list(plot = FALSE))
dev.off()
pdf(paste(sample,"_7_Contour_Inf",".pdf", sep=""))
image2D(z = mat.7, contour = T, smooth = TRUE, col=colorvar, alpha = transparency, box = FALSE, inttype = 1, clim = c(min, max), NAcol = "transparent", x = c(1:x), y = c(1:y), scale = F, colkey = list(plot = FALSE))
dev.off()
# pdf(paste(sample,"_1_Contour_Inf6",".pdf", sep=""))
# image2D(z = mat.1.small, contour = T, smooth = TRUE, col=colorvar, alpha = transparency, box = FALSE, inttype = 1, clim = c(min, max), NAcol = "transparent", x = c(1:x.small), y = c(1:y.small), scale = F, colkey = list(plot = FALSE))
# dev.off()
# pdf(paste(sample,"_2_Contour_Inf6",".pdf", sep=""))
# image2D(z = mat.2.small, contour = T, smooth = TRUE, col=colorvar, alpha = transparency, box = FALSE, inttype = 1, clim = c(min, max), NAcol = "transparent", x = c(1:x.small), y = c(1:y.small), scale = F, colkey = list(plot = FALSE))
# dev.off()
# pdf(paste(sample,"_3_Contour_Inf6",".pdf", sep=""))
# image2D(z = mat.3.small, contour = T, smooth = TRUE, col=colorvar, alpha = transparency, box = FALSE, inttype = 1, clim = c(min, max), NAcol = "transparent", x = c(1:x.small), y = c(1:y.small), scale = F, colkey = list(plot = FALSE))
# dev.off()
# pdf(paste(sample,"_4_Contour_Inf6",".pdf", sep=""))
# image2D(z = mat.4.small, contour = T, smooth = TRUE, col=colorvar, alpha = transparency, box = FALSE, inttype = 1, clim = c(min, max), NAcol = "transparent", x = c(1:x.small), y = c(1:y.small), scale = F, colkey = list(plot = FALSE))
# dev.off()
# pdf(paste(sample,"_5_Contour_Inf6",".pdf", sep=""))
# image2D(z = mat.5.small, contour = T, smooth = TRUE, col=colorvar, alpha = transparency, box = FALSE, inttype = 1, clim = c(min, max), NAcol = "transparent", x = c(1:x.small), y = c(1:y.small), scale = F, colkey = list(plot = FALSE))
# dev.off()
# pdf(paste(sample,"_6_Contour_Inf6",".pdf", sep=""))
# image2D(z = mat.6.small, contour = T, smooth = TRUE, col=colorvar, alpha = transparency, box = FALSE, inttype = 1, clim = c(min, max), NAcol = "transparent", x = c(1:x.small), y = c(1:y.small), scale = F, colkey = list(plot = FALSE))
# dev.off()
# pdf(paste(sample,"_7_Contour_Inf6",".pdf", sep=""))
# image2D(z = mat.7.small, contour = T, smooth = TRUE, col=colorvar, alpha = transparency, box = FALSE, inttype = 1, clim = c(min, max), NAcol = "transparent", x = c(1:x.small), y = c(1:y.small), scale = F, colkey = list(plot = FALSE))
# dev.off()
#mats_collection = mats_collection[-1,]
#write.table(mats_collection, file = paste0("Inf_clustering_table_", norm_samples, ".csv"), quote = F,sep = ",")
# plot inf6 for figshare
#print(head(mats_collection))
#row.names(mats_collection) = paste(str_replace_all(mats_collection[,"section"], "Section", "X"), mats_collection[,"x"], mats_collection[,"y"], sep = "_")
#mats_collection = mats_collection[row.names(mats_collection) %in% row.names(inf_all[inf_all$Inf. == "Inf6",]),]
#write.table(mats_collection, file = paste0("Inf_clustering_table_Inf6_", norm_samples, ".csv"), quote = F,sep = ",")
}
### DE analysis for RA 3dst ###
# removes all glob variables from env
rm(list = ls())
# Loading libraries
suppressMessages(suppressWarnings(library(devtools,warn.conflicts = F, quietly = T)))
suppressMessages(suppressWarnings(library(gplots,warn.conflicts = F, quietly = T)))
suppressMessages(suppressWarnings(library(destiny,warn.conflicts = F, quietly = T)))
suppressMessages(suppressWarnings(library(dpt,warn.conflicts = F, quietly = T)))
suppressMessages(suppressWarnings(library(scran,warn.conflicts = F, quietly = T)))
suppressMessages(suppressWarnings(library(plot3D,warn.conflicts = F, quietly = T)))
suppressMessages(suppressWarnings(library(Rtsne,warn.conflicts = F, quietly = T)))
suppressMessages(suppressWarnings(library(jackstraw,warn.conflicts = F, quietly = T)))
suppressMessages(suppressWarnings(library(rgl,warn.conflicts = F, quietly = T)))
suppressMessages(suppressWarnings(library(gdata,warn.conflicts = F, quietly = T)))
suppressMessages(suppressWarnings(library(ggplot2,warn.conflicts = F, quietly = T)))
suppressMessages(suppressWarnings(library(akima,warn.conflicts = F, quietly = T)))
suppressMessages(suppressWarnings(library(matrixStats,warn.conflicts = F, quietly = T)))
suppressMessages(suppressWarnings(library(cowplot,warn.conflicts = F, quietly = T)))
suppressMessages(suppressWarnings(library(pheatmap,warn.conflicts = F, quietly = T)))
suppressMessages(suppressWarnings(library(stringr,warn.conflicts = F, quietly = T)))
suppressMessages(suppressWarnings(library(grid,warn.conflicts = F, quietly = T)))
suppressMessages(suppressWarnings(library(ggpubr,warn.conflicts = F, quietly = T)))
suppressMessages(suppressWarnings(library(ggsignif,warn.conflicts = F, quietly = T)))
# set wd
setwd('/Users/sanjavickovic/Desktop/morphoSPOT/3dst_repo/3dst/de_analysis')
# Which samples do you want to use?
norm_samples = "RA2"
# Where are you norm expression R files located?
path_samples = "../data/"
# Set output directory that will contain all cell_typing pdf plots and output gene files
path_output = "../../../plot_outputs/"
# Source f(x) file
source('../functions/Read_Functions.R') # in ./functions
# Load data as R objects for selected RA patient
files_norm = list.files(pattern = glob2rx(paste0(norm_samples, "_norm.exp.values.*")), path = path_samples)
norm_mat_loaded_in_env = ""
section_labels = ""
all_ann_inf = ""
for (i in 1:length(files_norm)){
load(paste0(path_samples, files_norm[i]))
load(paste0(path_samples, norm_samples, "_", i, "_selected_adjusted_spots_3D_manual_app"))
assign(paste0("inf_s", i), read.csv(paste0("../data/", norm_samples, "_", i, "_all_inf.csv"), header = T, row.names = 1)) # files found on SCP
norm_mat_loaded_in_env = c(norm_mat_loaded_in_env, paste0("m", i) )
section_labels = c(section_labels, sapply(strsplit(colnames(get(paste0("m", i))), "_"), "[[", 1))
all_ann_inf = c(all_ann_inf, row.names(get(paste0("inf_s", i))))
}
norm_mat_loaded_in_env = norm_mat_loaded_in_env[-1]
section_labels = section_labels[-1]
all_ann_inf = all_ann_inf[-1]
# Combine all the norm data in one matrix
RA.norm = do.call(mbind, mget(norm_mat_loaded_in_env))
RA.norm[is.na(RA.norm)] <- 0
m = RA.norm # this is a combined matrix for all sections from a single RA patient # precaution
### Take only infiltrates that are present in all sections according to annotations
inf_all = read.csv(paste0("../data/", norm_samples, "_zstack_Infs.csv"), header = T)
# Subset per infiltrate as the naming ie. Inf1 presumes we are following the same infiltrate (given 3D alignment) in all present sections
all_inf = ""
for (i in 1:length(unique(inf_all$Inf.))){
assign(paste0("RA.norm.inf", i), as.matrix(RA.norm[,colnames(RA.norm) %in% row.names(subset(inf_all, inf_all$Inf. == paste0("Inf", i)))]))
all_inf = c(all_inf, colnames(get(paste0("RA.norm.inf", i)))) # Make an object with all annotated infiltrates
}
all_inf = all_inf[-1]
### Make avg gene exp barplot per inf and section
gen_names = c("CD52","MS4A1","FN1") # list of marker genes
# Calculate avg gene expression per inf and section
for (i in 1:length(unique(inf_all$Inf.))){
assign(paste0("inf", i, "_rm"), rm_section(get(paste0("RA.norm.inf", i))[gen_names,]))
assign(paste0("inf_all_", i, "_rm"), rm_section_all(get(paste0("RA.norm.inf", i))[gen_names,]))
assign(paste0("sd", i, "_rm"), sd_section(get(paste0("RA.norm.inf", i))[gen_names,]))
assign(paste0("s", i, "_rm"), size_section(get(paste0("RA.norm.inf", i))[gen_names,]))
}
# Plot avg gene expression for each Inf separately (barplots)
myplots <- vector("list", length(unique(inf_all$Inf.)))
for(i in 1:length(unique(inf_all$Inf.))){
myData = data.frame(as.numeric(get(paste0("inf", i, "_rm"))),as.numeric(sweep(get(paste0("sd", i, "_rm")), 2, sqrt(get(paste0("s", i, "_rm"))), "/")))
colnames(myData) = c("Avg", "SEM")
nms = ""
for (j in 1:length(unique(section_labels))){
nms = c(nms, paste0("Section",j, "_", gen_names))
}
nms = nms[-1]
row.names(myData) = nms
limits <- aes(ymax = Avg + SEM, ymin = Avg - SEM)
myplots[[i]] <- ggplot(data = myData, aes(x = factor(sapply(strsplit(row.names(myData), split = "_"),"[[",1)), y = Avg, fill = rep(c("Gene1: CD52","Gene2: MS4A1","Gene3: FN1"), length(unique(section_labels))))) + geom_bar(stat = "identity", position = position_dodge(0.99)) +
geom_errorbar(limits, position = position_dodge(0.99), width = 0.25) +
labs(x = "", y = "Avg expression") +
scale_fill_manual(name = "Gene", values=c("#066799",  "#7392CB","#CDCC63")) +
labs(title = paste0("Infiltrate ", i))
}
save_plot(paste0(path_output,"Average_genes_per_infiltrate_", norm_samples, ".pdf"), plot_grid(plotlist=myplots), ncol = 3, nrow = 2)
# Plot avg gene expression for each Inf separately (barplots)
myplots <- vector("list", length(unique(inf_all$Inf.))*length(unique(sapply(strsplit(row.names(inf_all), "_"), "[[", 1))))
counter = 1
myData_collect = matrix(nrow = 1, ncol = 4)
colnames(myData_collect) = c("Avg", "Section", "Gene", "inf")
for(i in 1:length(unique(inf_all$Inf.))){
myData = data.frame(get(paste0("inf_all_", i, "_rm")))
myData = t(myData)
row.names(myData) = str_replace(sapply(strsplit(row.names(myData), "\\."), "[[",1), "X", "Section")
myData_0 = matrix(ncol = 3, nrow = 1)
for (c in 1:ncol(myData)){
myData_0 = rbind(myData_0, cbind(as.matrix(myData[,c]), as.matrix(row.names(myData)), as.matrix(rep(colnames(myData)[c], nrow(myData)))))
}
myData_0 = myData_0[-1,]
colnames(myData_0) = c("Avg", "Section", "Gene")
myData_0 = as.data.frame(myData_0)
myData_0$Avg = as.numeric(myData_0$Avg)
row.names(myData_0) = seq(1, nrow(myData_0))
myData_0$inf = rep(paste0("inf", i), nrow(myData_0))
myData_collect = rbind(myData_collect, myData_0)
for (sec in 1:length(unique(myData_0$Section))){
myData_sec = myData_0[myData_0$Section == unique(myData_0$Section)[sec],]
myplots[[counter]] <- ggplot(data = myData_sec, aes(x = Gene, y = Avg, fill = Gene)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.01)) +
labs(x = "", y = "Avg expression") +
scale_fill_manual(name = "Gene", values=c("#066799",  "#7392CB","#CDCC63")) +
labs(title = paste0("Infiltrate#", i, " Section#", sec))
counter = counter + 1
}
}
myData_collect = myData_collect[-1,]
save_plot(paste0(path_output,"Average_genes_per_infiltrate_boxplots_", norm_samples, ".pdf"), plot_grid(plotlist=myplots, ncol = length(unique(myData_0$Section)), nrow = length(unique(inf_all$Inf.))), base_width = 15, base_height =10)
# export data for manuscript figshare
row.names(myData_collect) = seq(1, nrow(myData_collect))
#write.table(myData_collect, file = "/Users/sanjavickovic/Desktop/morphoSPOT/Manuscript_Nov2021/figshare/SuppFig5b.csv", sep = ",", quote = F)
# Run analysis on infiltrates only
#k = 2 #RA1
k = 3 #RA2
#k = 3 #RA3
#k = 3 #RA4
#k = 2 #RA5
#k = 3 #RA6
col.inf.clusters = run_inf_analysis(RA.norm[,colnames(RA.norm) %in% all_inf], k=k, norm_samples, path_output) # number of clusters
# Run spatial clustering analysis on all ST spots per biopsy
#f = 4 #RA1
f = 3 #RA2
#f = 3 #RA3
#f = 4 #RA4
#f = 4 # RA5
#f = 4 # RA6
col.spatial.clusters = run_spatial_cluster_analysis(RA.norm, f, read_tsne_from_memory="yes", norm_samples, path_output)
# Which barcodes and clusters are part of the annotated infiltrates?
inf_per_cluster(RA.norm, all_ann_inf, col.spatial.clusters)
#### Make barplot of avg expression per interesting marker genes
gen_names = c("CCL19","CXCL13","LTB","PRG4","MMP3", "CD52","MS4A1","FN1","TYROBP")
save_plot(paste0(path_output,"Average_genes_per_cluster_", norm_samples, ".pdf"), avg_genes_barplot(RA.norm, gen_names, col.spatial.clusters), ncol = 1, nrow = 1, base_width = 10, base_height = 5)
save_plot(paste0(path_output,"Average_genes_per_cluster_boxplot_", norm_samples, ".pdf"), avg_genes_box_old(RA.norm, gen_names, col.spatial.clusters), ncol = 1, nrow = 1, base_width = 10, base_height = 10)
write.table(avg_genes_box_old_data(RA.norm, gen_names, col.spatial.clusters), file = paste0("/Users/sanjavickovic/Desktop/morphoSPOT/Manuscript_Nov2021/figshare/Average_genes_per_cluster_boxplot_", norm_samples, ".csv"), sep = ",", quote = F)
#Plot 3D genes as a heatmap (not morphological)
#Assign color annotations for plotting in 3D for inf and clusters
ann.col.inf = assign_col_inf_numbers(RA.norm, col.inf.clusters) # presumes max 4 clusters
ann.cluster = assign_col_cluster_numbers(col.spatial.clusters, all_ann_inf) # presumes max 3 clusters
plot.gene.2d.inf.7 = function(sample, cluster, m1, m2, m3, m4, m5, m6, m7, s1, s2, s3, s4, s5, s6, s7, x, y, transparency, min, max){ #, inf_all)
#mats_collection = matrix(ncol = 5, nrow = 1)
#colnames(mats_collection) = c("x", "y", "score", "sample", "section")
#inf_all$names = row.names(inf_all)
for (i in c(1:7)) {
if (i == "1") {
spots = s1
exp.values = m1}
if (i == "2") {
spots = s2
exp.values = m2}
if (i == "3") {
spots = s3
exp.values = m3}
if (i == "4") {
spots = s4
exp.values = m4}
if (i == "5") {
spots = s5
exp.values = m5}
if (i == "6") {
spots = s6
exp.values = m6}
if (i == "7") {
spots = s7
exp.values = m7}
clust.spots = rbind(s1,s2,s3,s4,s5,s6,s7)
genes.barcodes = clust.spots[rownames(clust.spots) %in% colnames(exp.values),]
exp.values = exp.values[,colnames(exp.values) %in% rownames(clust.spots)]
exp.values = exp.values[rowSums(exp.values) != 0,]
cluster = ann.col.inf
cluster = cluster[colnames(exp.values),]
genes.barcodes = cbind(genes.barcodes, cluster)
x1 = as.numeric(genes.barcodes[,1])
x1 = x1[!is.na(x1)]
y1 = as.numeric(genes.barcodes[,2])
y1 = y1[!is.na(y1)]
z = as.numeric(genes.barcodes[,3])
dis = rep(0.25 * as.numeric(i), nrow(genes.barcodes))
w = as.numeric(dis)
# x = 40
# y = 40
# transparency = 1
s =  interp(x1, y1, z, nx = x, ny = y)
#mats_collection = rbind(mats_collection, make_output_tissue_matrix(s$z, norm_samples, i))
#genes.barcodes.small = genes.barcodes[row.names(genes.barcodes) %in% row.names(inf_all[inf_all$Inf. == "Inf6",]),]
#x1.small = as.numeric(genes.barcodes.small[,1])
#x1.small = x1.small[!is.na(x1.small)]
#y1.small = as.numeric(genes.barcodes.small[,2])
#y1.small = y1.small[!is.na(y1.small)]
#z.small = as.numeric(genes.barcodes.small[,3])
#dis.small = rep(0.25 * as.numeric(i), nrow(genes.barcodes.small))
#w = as.numeric(dis.small)
#x.small = 100
#y.small = 100
# transparency = 1
#s.small =  interp(x1.small, y1.small, z.small, nx = x.small, ny = y.small)
if (i == "1") {
mat.1 = s$z}
#mat.1.small = s.small$z}
if (i == "2") {
mat.2 = s$z}
#mat.2.small = s.small$z}
if (i == "3") {
mat.3 = s$z}
#mat.3.small = s.small$z}
if (i == "4") {
mat.4 = s$z}
#mat.4.small = s.small$z}
if (i == "5") {
mat.5 = s$z}
#mat.5.small = s.small$z}
if (i == "6") {
mat.6 = s$z}
#mat.6.small = s.small$z}
if (i == "7") {
mat.7 = s$z}
#mat.7.small = s.small$z}
}
colorvar = colorRampPalette(c("#8a3795", "#4ebceb","#f15f48","gray80"))(4)
pdf(paste(sample,"_1_Contour_Inf",".pdf", sep=""))
image2D(z = mat.1, contour = T, smooth = TRUE, col=colorvar, alpha = transparency, box = FALSE, inttype = 1, clim = c(min, max), NAcol = "transparent", x = c(1:x), y = c(1:y), scale = F, colkey = list(plot = FALSE))
dev.off()
pdf(paste(sample,"_2_Contour_Inf",".pdf", sep=""))
image2D(z = mat.2, contour = T, smooth = TRUE, col=colorvar, alpha = transparency, box = FALSE, inttype = 1, clim = c(min, max), NAcol = "transparent", x = c(1:x), y = c(1:y), scale = F, colkey = list(plot = FALSE))
dev.off()
pdf(paste(sample,"_3_Contour_Inf",".pdf", sep=""))
image2D(z = mat.3, contour = T, smooth = TRUE, col=colorvar, alpha = transparency, box = FALSE, inttype = 1, clim = c(min, max), NAcol = "transparent", x = c(1:x), y = c(1:y), scale = F, colkey = list(plot = FALSE))
dev.off()
pdf(paste(sample,"_4_Contour_Inf",".pdf", sep=""))
image2D(z = mat.4, contour = T, smooth = TRUE, col=colorvar, alpha = transparency, box = FALSE, inttype = 1, clim = c(min, max), NAcol = "transparent", x = c(1:x), y = c(1:y), scale = F, colkey = list(plot = FALSE))
dev.off()
pdf(paste(sample,"_5_Contour_Inf",".pdf", sep=""))
image2D(z = mat.5, contour = T, smooth = TRUE, col=colorvar, alpha = transparency, box = FALSE, inttype = 1, clim = c(min, max), NAcol = "transparent", x = c(1:x), y = c(1:y), scale = F, colkey = list(plot = FALSE))
dev.off()
pdf(paste(sample,"_6_Contour_Inf",".pdf", sep=""))
image2D(z = mat.6, contour = T, smooth = TRUE, col=colorvar, alpha = transparency, box = FALSE, inttype = 1, clim = c(min, max), NAcol = "transparent", x = c(1:x), y = c(1:y), scale = F, colkey = list(plot = FALSE))
dev.off()
pdf(paste(sample,"_7_Contour_Inf",".pdf", sep=""))
image2D(z = mat.7, contour = T, smooth = TRUE, col=colorvar, alpha = transparency, box = FALSE, inttype = 1, clim = c(min, max), NAcol = "transparent", x = c(1:x), y = c(1:y), scale = F, colkey = list(plot = FALSE))
dev.off()
# pdf(paste(sample,"_1_Contour_Inf6",".pdf", sep=""))
# image2D(z = mat.1.small, contour = T, smooth = TRUE, col=colorvar, alpha = transparency, box = FALSE, inttype = 1, clim = c(min, max), NAcol = "transparent", x = c(1:x.small), y = c(1:y.small), scale = F, colkey = list(plot = FALSE))
# dev.off()
# pdf(paste(sample,"_2_Contour_Inf6",".pdf", sep=""))
# image2D(z = mat.2.small, contour = T, smooth = TRUE, col=colorvar, alpha = transparency, box = FALSE, inttype = 1, clim = c(min, max), NAcol = "transparent", x = c(1:x.small), y = c(1:y.small), scale = F, colkey = list(plot = FALSE))
# dev.off()
# pdf(paste(sample,"_3_Contour_Inf6",".pdf", sep=""))
# image2D(z = mat.3.small, contour = T, smooth = TRUE, col=colorvar, alpha = transparency, box = FALSE, inttype = 1, clim = c(min, max), NAcol = "transparent", x = c(1:x.small), y = c(1:y.small), scale = F, colkey = list(plot = FALSE))
# dev.off()
# pdf(paste(sample,"_4_Contour_Inf6",".pdf", sep=""))
# image2D(z = mat.4.small, contour = T, smooth = TRUE, col=colorvar, alpha = transparency, box = FALSE, inttype = 1, clim = c(min, max), NAcol = "transparent", x = c(1:x.small), y = c(1:y.small), scale = F, colkey = list(plot = FALSE))
# dev.off()
# pdf(paste(sample,"_5_Contour_Inf6",".pdf", sep=""))
# image2D(z = mat.5.small, contour = T, smooth = TRUE, col=colorvar, alpha = transparency, box = FALSE, inttype = 1, clim = c(min, max), NAcol = "transparent", x = c(1:x.small), y = c(1:y.small), scale = F, colkey = list(plot = FALSE))
# dev.off()
# pdf(paste(sample,"_6_Contour_Inf6",".pdf", sep=""))
# image2D(z = mat.6.small, contour = T, smooth = TRUE, col=colorvar, alpha = transparency, box = FALSE, inttype = 1, clim = c(min, max), NAcol = "transparent", x = c(1:x.small), y = c(1:y.small), scale = F, colkey = list(plot = FALSE))
# dev.off()
# pdf(paste(sample,"_7_Contour_Inf6",".pdf", sep=""))
# image2D(z = mat.7.small, contour = T, smooth = TRUE, col=colorvar, alpha = transparency, box = FALSE, inttype = 1, clim = c(min, max), NAcol = "transparent", x = c(1:x.small), y = c(1:y.small), scale = F, colkey = list(plot = FALSE))
# dev.off()
#mats_collection = mats_collection[-1,]
#write.table(mats_collection, file = paste0("Inf_clustering_table_", norm_samples, ".csv"), quote = F,sep = ",")
# plot inf6 for figshare
#print(head(mats_collection))
#row.names(mats_collection) = paste(str_replace_all(mats_collection[,"section"], "Section", "X"), mats_collection[,"x"], mats_collection[,"y"], sep = "_")
#mats_collection = mats_collection[row.names(mats_collection) %in% row.names(inf_all[inf_all$Inf. == "Inf6",]),]
#write.table(mats_collection, file = paste0("Inf_clustering_table_Inf6_", norm_samples, ".csv"), quote = F,sep = ",")
}
plot.gene.2d.inf.7(norm_samples, ann.col.inf, m1, m2, m3, m4, m5, m6, m7, s1, s2, s3, s4, s5, s6, s7, x=40, y=20, transparency=1, min=1, max=4)
